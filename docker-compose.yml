version: '3'

services:
  db:
    image: 'neo4j:4.2.2-enterprise'
    # deploy:
    #   resources:
    #     limits:
    #       memory: 2G
    #     reservations:
    #       memory: 1G
    ## in docker-compose v2:
    ## mem_limit: 2G
    ## memswap_limit: 3G
    ## mem_reservation: 1G
    restart: unless-stopped
    ports:
      - 7474:7474
      - 7473:7473
      - 7687:7687
    volumes:
      - ./neo4j/plugins:/plugins
      - ./neo4j/import:/import
      - ./neo4j/data:/data
      - ./neo4j/logs:/logs
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_apoc_import_file_use__neo4j__config=true
      # - NEO4J_dbms_memory_pagecache_size=2G
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_export_file_enabled=true
      # - NEO4JLABS_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*

  api:
    build: ./api
    # restart: unless-stopped
    command: sh -c "cd /api/ && npm install && npm run start" # dev option
    ports:
      - 4000:4000
    volumes:
      - ./api:/api
      # - /api/node_modules # prod option (hide node modules folder)
    environment:
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - NEO4J_ENCRYPTED=${NEO4J_ENCRYPTED}
      - GRAPHQL_SERVER_PORT=${GRAPHQL_SERVER_PORT}
      - GRAPHQL_SERVER_PATH=${GRAPHQL_SERVER_PATH}
      - GRAPHQL_SERVER_HOST=${GRAPHQL_SERVER_HOST}
      - HOST_URI=${HOST_URI}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=${JWT_EXPIRY}
      - DEFAULT_ROLE=${DEFAULT_ROLE}
      - AUTH_LOGIN_UI_URI=${AUTH_LOGIN_UI_URI}
      - AUTH_NEW_PASS_UI_URI=${AUTH_NEW_PASS_UI_URI}
      - AUTH_VERIFY_CODE_URI=${AUTH_VERIFY_CODE_URI}
      - AUTH_CONFIRM_CODE_UI_URI=${AUTH_CONFIRM_CODE_UI_URI}
      - AUTH_CHANGE_PASS_UI_URI=${AUTH_CHANGE_PASS_UI_URI}
      - CLOUD_NAME=${CLOUD_NAME}
      - CLOUD_API_KEY=${CLOUD_API_KEY}
      - CLOUD_API_SECRET=${CLOUD_API_SECRET}
      - CLOUD_IMG_FOLDER=${CLOUD_IMG_FOLDER}
    links:
      - db
    depends_on:
      - db

  client-build:
    build: ./client
    command: sh -c "cd /client/ && npm install && npm run build" # dev option
    volumes:
      - ./client:/client

  client-serve:
    build: ./nginx
    restart: unless-stopped
    ports:
      - 80:80
    environment:
      - NGINX_HOST=${NGINX_HOST}
      - NGINX_PORT=${NGINX_PORT}
    volumes:
      - ./client/build:/usr/share/nginx/html
    depends_on:
      - client-build
