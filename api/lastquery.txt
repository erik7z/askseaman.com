MATCH (`question`:`Question`) WITH `question` ORDER BY question.createdAt DESC RETURN `question` { .totalCount , .nodeId , .title , .text ,author: head([(`question`)<-[:`ASKED`]-(`question_author`:`User`) | `question_author` { .nodeId , .name , .surname , .rank }]) , .viewsCount ,answersCount: apoc.cypher.runFirstColumn("RETURN size((this)-[:HAS_ANSWER]->(:Answer)) as answersCount", {this: question, cypherParams: $cypherParams}, false),subscribersCount: apoc.cypher.runFirstColumn("RETURN size((this)<-[:SUBSCRIBED]-(:User)) as subscribersCount", {this: question, cypherParams: $cypherParams}, false),commentsCount: apoc.cypher.runFirstColumn("RETURN size((this)-[:HAS_COMMENT]->(:Comment)) as commentsCount", {this: question, cypherParams: $cypherParams}, false),createdAt: { year: `question`.createdAt.year , month: `question`.createdAt.month , day: `question`.createdAt.day , hour: `question`.createdAt.hour , minute: `question`.createdAt.minute },tags: [(`question`)<-[:`TAGGED`]-(`question_tags`:`Tag`) | `question_tags` { .nodeId , .name }][..5] } AS `question`