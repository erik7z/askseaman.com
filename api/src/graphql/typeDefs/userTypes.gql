type User {
	nodeId: ID! @id
	name: String!
	surname: String!
	rank: String
	description: String
	createdAt: DateTime
	timestamp: String
	roles: [String]
	location: String

	questionsCount: Int
		@cypher(
			statement: "RETURN size((this)-[:ASKED]->(:Question)) as questionsCount"
		)
	answersCount: Int
		@cypher(
			statement: "RETURN size((this)-[:ANSWERED]->(:Answer)) as answersCount"
		)
	solvedQuestionsCount: Int
		@cypher(
			statement: "RETURN size((this)-[:ANSWERED]->(:Answer)<-[:ACCEPTED]-(:User)) as solvedQuestionsCount"
		)
	#TODO: logic to select favorite tags
	favoriteTags: [Tag]
		@cypher(
			statement: """
			MATCH (this)-[:ASKED]->(:Question)<-[:TAGGED]-(t:Tag) RETURN t as favoriteTags
			UNION
			MATCH (this)-[:ANSWERED]->(:Answer)<-[:HAS_ANSWER]-(:Question)<-[:TAGGED]-(t:Tag) RETURN t as favoriteTags
			"""
		)

	email: LocalAccount  #TODO: hide email from outer world
		@isAuthenticated
		@relation(name: "AUTHENTICATED_WITH", direction: OUT)
	questions: [Question] @relation(name: "ASKED", direction: OUT)
	answers: [Answer] @relation(name: "ANSWERED", direction: OUT)
	tags: [Tag] @relation(name: "ADDED_BY", direction: IN)
	comments: [Comment] @relation(name: "ADDED_COMMENT", direction: OUT)
	liked: [CanBeLiked] @relation(name: "LIKED", direction: OUT)
	subscriptions: [CanBeSubscribed] @relation(name: "SUBSCRIBED", direction: OUT)
	moderatingTags: [Tag] @relation(name: "MODERATED_BY", direction: IN)
}

type Profile {
	name: String
	surname: String
	rank: String
	description: String
	isPasswordChanged: String
}

type LocalAccount {
	user: User! @relation(name: "AUTHENTICATED_WITH", direction: IN)
	email: String! @unique
	password: String
	code: Int
}

type Query {
	CurrentUser: User!
		@isAuthenticated
		@cypher(
			statement: """
			MATCH (u:User {nodeId: $cypherParams.currentUserId})
			RETURN u
			"""
		)
	UserRanks: JSONObject
}

type Mutation {
	Register(data: RegisterUserInput!): AuthResponse!
	SignIn(data: LoginUserInput!): AuthResponse!
	ChangePassRequest(data: EmailInput!): RedirectUriResponse!
		@cypher(
			statement: """
			MATCH (u:User {email: $data.email})-[:AUTHENTICATED_WITH]->(l:LocalAccount {email: $data.email})
			SET l.code = $cypherParams.code
			RETURN u
			"""
		)
	ChangePassConfirm(data: CodeInput!): RedirectUriResponse!
		@cypher(
			statement: """
			MATCH (u:User)-[:AUTHENTICATED_WITH]->(l:LocalAccount {code: $data.code})
			RETURN u
			"""
		)

	ChangePassComplete(data: newPassInput!): RedirectUriResponse!
		@cypher(
			statement: """
			MATCH (u:User)-[:AUTHENTICATED_WITH]->(l:LocalAccount {code: $data.code})
			SET l.password = $data.new_password, l.code = null
			RETURN u
			"""
		)

	EditProfile(data: UserProfileInput!): EditProfileResponse!
		@isAuthenticated
		@cypher(
			statement: """
			MATCH (u:User {nodeId: $cypherParams.currentUserId})-[:AUTHENTICATED_WITH]->(l:LocalAccount)

			WITH {
						name: u.name,
						surname: u.surname,
						rank: u.roles,
						description: u.description
					} as Profile RETURN Profile
			"""
		)
}
