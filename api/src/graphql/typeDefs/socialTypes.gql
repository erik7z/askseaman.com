type Mutation {
	ToggleLike(data: nodeIdInput!): LikeResponse!
		@isAuthenticated
		@cypher(
			statement: """
			MATCH (u:User {nodeId: $cypherParams.currentUserId}), (t:CanBeLiked {nodeId: $data.nodeId})
				CREATE (u)-[:LIKED]->(t)
				WITH u, t
			CALL {
				MATCH (u)-[r:LIKED]->(t), (u)-[:LIKED]->(t)
				DELETE r
				RETURN t as g
				UNION
				MATCH (g:CanBeLiked {nodeId: $data.nodeId})
				RETURN  g
			}
			RETURN g
			"""
		)

	ToggleSubscribe(data: nodeIdInput!): SubscribeResponse!
		@isAuthenticated
		@cypher(
			statement: """
			MATCH (u:User {nodeId: $cypherParams.currentUserId}), (t:CanBeSubscribed {nodeId: $data.nodeId})
				CREATE (u)-[:SUBSCRIBED]->(t)
				WITH u, t
			CALL {
				MATCH (u)-[r:SUBSCRIBED]->(t), (u)-[:SUBSCRIBED]->(t)
				DELETE r
				RETURN t as g
				UNION
				MATCH (g:CanBeSubscribed {nodeId: $data.nodeId})
				RETURN  g
			}
			RETURN g
			"""
		)

	Vote(data: VoteInput!): VoteResponse!
		@isAuthenticated
		@cypher(
			statement: """
			MATCH (u:User {nodeId: $cypherParams.currentUserId}), (t:CanBeVoted {nodeId: $data.nodeId})
				WHERE $data.action = "upVote"
			CALL {
				WITH u,t
				WITH u,t
				WHERE NOT (u)-[:VOTED_DOWN]->(t)
				MERGE (u)-[:VOTED_UP]->(t)
				RETURN t as g

						UNION

				WITH u,t
				MATCH (u)-[r:VOTED_DOWN]->(t)
				DELETE r
				RETURN t as g
			}

			RETURN g

			UNION

			MATCH (u:User {nodeId: $cypherParams.currentUserId}), (t:CanBeVoted {nodeId: $data.nodeId})
				WHERE $data.action = "downVote"
			CALL {
				WITH u,t
				WITH u,t
				WHERE NOT (u)-[:VOTED_UP]->(t)
				MERGE (u)-[:VOTED_DOWN]->(t)
				RETURN t as g

						UNION

				WITH u,t
				MATCH (u)-[r:VOTED_UP]->(t)
				DELETE r
				RETURN t as g
			}
			RETURN g

			UNION

			MATCH (g:CanBeVoted {nodeId: $data.nodeId})
			RETURN  g
			"""
		)
}
